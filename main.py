from config import TOKEN
import asyncio
from aiogram import Bot, Dispatcher, types , F
from aiogram.types import Message
from aiogram.filters import Command, CommandStart
from aiogram.utils import executor
import logging

#–ü–µ—Ä–≤–∏—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞ 
bot = Bot(token=TOKEN) 
dp = Dispatcher()

@dp.message(CommandStart())
async def start(message: Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üìã–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")
    btn2 =types.KeyboardButton("–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤")
    
    markup.add(btn1, btn2)
 #   btn5 = types.KeyboardButton("/test1")
  #  markup.row(btn5)
    await message.answer(
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥, –ª–∏–±–æ –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –≤ –º–µ–Ω—é",
        reply_markup=markup
    )

@dp.message(F.text == "üìã–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")
async def btn1(message: Message):
    await help(message)  

@dp.message(F.text == "–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤")
async def btn2(message: Message):
    await help(message)
    
#@bot.message_handler(func=lambda message: message.text == "test1")
#def btn3(message):
#    test1(message)   

@dp.message(Command('help'))    
async def help(message: Message):
    await message.answer("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: /start , /help , /list")

''' –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ '''   

   
''' –û—Å–Ω–æ–≤–∞ '''    
    
# @bot.message_handler(commands=['listy'])
# async def listy(message):
#     markup = types.ReplyKeyboardMarkup()
#     lsbtn1 = types.KeyboardButton("Onex")
#     markup.row(lsbtn1)
#     lsbtn2 =types.KeyboardButton("Shipper")
#     markup.row(lsbtn2)
#     bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–≤—ã–π —Å–µ—Ä–≤–∏—Å", reply_markup=markup)

# @bot.message_handler(func=lambda message: message.text == "–í—ã–±—Ä–∞–Ω Onex")
# async def lsbtn1(message):
#     onex(message)   

# @bot.message_handler(func=lambda message: message.text == "–í—ã–±—Ä–∞–Ω Shipper")
# async def lsbtn2(message):
#     shipper(message) 

# # –í—ã–±—Ä–∞–Ω Onex

# @bot.message_handler(commands=['onex'])
# async def onex(message):
#     markup = types.ReplyKeyboardMarkup()
#     obtn1 = types.KeyboardButton("–í –ê–º–µ—Ä–∏–∫–µ")
#     markup.row(obtn1)
#     obtn2 =types.KeyboardButton("–í –ø—É—Ç–∏")
#     markup.row(obtn2)
#     obtn3 =types.KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å –≤ GDocs")
#     markup.row(obtn3)
#     bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç", reply_markup=markup)
    
# @bot.message_handler(func=lambda message: message.text == "–í –ê–º–µ—Ä–∏–∫–µ")
# async def obtn1(message):
#     o_usa(message)   

# @bot.message_handler(func=lambda message: message.text == "–í –ø—É—Ç–∏")
# async def obtn2(message):
#     o_way(message)     
    
# @bot.message_handler(func=lambda message: message.text == "–ó–∞–ø–∏—Å–∞—Ç—å –≤ GDocs")
# async def obtn3(message):
#     o_docs(message)    

# @bot.message_handler(commands=['ousa'])
# async def o_usa(message):
#     bot.send_message(message.chat.id, f"–°—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ Onex –í –ê–º–µ—Ä–∏–∫–µ")

# @bot.message_handler(commands=['oway'])
# async def o_way(message):
#     bot.send_message(message.chat.id, f"–°—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ Onex –í –ø—É—Ç–∏")
    
# @bot.message_handler(commands=['odocs'])
# async def o_docs(message):
#     bot.send_message(message.chat.id, f"–°—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ Onex –ó–∞–ø–∏—Å—å –≤ –¥–æ–∫–∏")
        
# # –í—ã–±—Ä–∞–Ω Shipper

# @bot.message_handler(commands=['shipper'])
# async def shipper(message):
#     markup = types.ReplyKeyboardMarkup()
#     sbtn1 = types.KeyboardButton("–í –ê–º–µ—Ä–∏–∫–µ")
#     markup.row(sbtn1)
#     sbtn2 =types.KeyboardButton("–í –ø—É—Ç–∏")
#     markup.row(sbtn2)
#     sbtn3 =types.KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å –≤ GDocs")
#     markup.row(sbtn3)
#     bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç", reply_markup=markup)
    
# @bot.message_handler(func=lambda message: message.text == "–í –ê–º–µ—Ä–∏–∫–µ")
# async def sbtn1(message):
#     s_usa(message)   

# @bot.message_handler(func=lambda message: message.text == "–í –ø—É—Ç–∏")
# async def sbtn2(message):
#     s_way(message)     
    
# @bot.message_handler(func=lambda message: message.text == "–ó–∞–ø–∏—Å–∞—Ç—å –≤ GDocs")
# async def sbtn3(message):
#     s_docs(message)

# @bot.message_handler(commands=['s_usa'])
# async def s_usa(message):
#     bot.send_message(message.chat.id, f"–°—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ Onex –í –ê–º–µ—Ä–∏–∫–µ")

# @bot.message_handler(commands=['s_way'])
# async def s_way(message):
#     bot.send_message(message.chat.id, f"–°—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ Onex –í –ø—É—Ç–∏")
    
# @bot.message_handler(commands=['s_docs'])
# async def s_docs(message):
#     bot.send_message(message.chat.id, f"–°—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ Onex –ó–∞–ø–∏—Å—å –≤ –¥–æ–∫–∏")


# #–§—Ä–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã    
# @bot.message_handler()
# async def info(message):
    
#     if (message.text.lower() == '–ø—Ä–∏–≤–µ—Ç' or message.text.lower() == '—Å–∞–ª–∞–º'):
#         bot.send_message(message.chat.id, f"–ï—â–µ —Ä–∞–∑ –ø—Ä–∏–≤–µ—Ç,–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /help –∏–ª–∏ –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –º–Ω–æ–π")
           
#     elif (message.text.lower() == '—Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥' or message.text.lower() == '–∫–æ–º–∞–Ω–¥—ã'):
#         help(message) 
                       
#     else:
#         bot.send_message(message.chat.id, "–ù–µ –∑–Ω–∞—é —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –∏–ª–∏ –º–µ–Ω—é")

''' –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ '''

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print('Exit')
    